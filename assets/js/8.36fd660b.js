(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{463:function(t,n,r){"use strict";r.r(n);var e=r(28),s=Object(e.a)({},(function(){var t=this,n=t.$createElement,r=t._self._c||n;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h2",{attrs:{id:"工作原理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#工作原理"}},[t._v("#")]),t._v(" 工作原理")]),t._v(" "),r("ul",[r("li",[r("p",[r("strong",[t._v("初始化参数：")]),t._v(" 解析webpack配置参数，合并shell传入和webpack.config.js文件配置的参数,形成最后的配置结果；")])]),t._v(" "),r("li",[r("p",[r("strong",[t._v("开始编译：")]),t._v(" 上一步得到的参数初始化compiler对象，注册所有配置的插件，插件 监听webpack构建生命周期的事件节点，做出相应的反应，执行对象的run方法开始执行编译；")])]),t._v(" "),r("li",[r("p",[r("strong",[t._v("确定入口：")]),t._v(" 从配置的entry入口，开始解析文件构建AST语法树，找出依赖，递归下去；")])]),t._v(" "),r("li",[r("p",[r("strong",[t._v("编译模块：")]),t._v(" 递归中根据文件类型和loader配置，调用所有配置的loader对文件进行转换，再找出该模块依赖的模块，再递归本步骤直到所有入口依赖的文件都经过了本步骤的处理；")])]),t._v(" "),r("li",[r("p",[r("strong",[t._v("完成模块编译并输出：")]),t._v(" 递归完事后，得到每个文件结果，包含每个模块以及他们之间的依赖关系，根据entry或分包配置生成代码块chunk;")])]),t._v(" "),r("li",[r("p",[r("strong",[t._v("输出完成：")]),t._v(" 输出所有的chunk到文件系统；")])])])])}),[],!1,null,null,null);n.default=s.exports}}]);